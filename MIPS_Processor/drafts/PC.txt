library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity PC is
    port (
        clk         : in  std_logic;
        reset       : in  std_logic;
        jump_addr   : in  std_logic_vector(31 downto 0);
        branch_offset : in  std_logic_vector(31 downto 0);
        pc_src      : in  std_logic_vector(1 downto 0); -- 2비트 입력
        pc_out      : out std_logic_vector(31 downto 0)
    );
end PC;

architecture Behavioral of PC is
    signal pc_reg : std_logic_vector(31 downto 0) := (others => '0'); -- 현재 실행중인 명령어의 주소 저장
    signal pc_next: std_logic_vector(31 downto 0);
begin
    -- PC 업데이트
    process(clk, reset)
    begin
        if reset = '1' then
            pc_reg <= (others => '0'); -- 리셋 시 PC 초기화
        elsif rising_edge(clk) then
            pc_reg <= pc_next; -- 다음 PC 값 설정
        end if;
    end process;

    -- 다음 PC 결정 로직
    process(pc_src, pc_reg, jump_addr, branch_offset)
    begin
        case pc_src is
            when "00" => -- 비분기 명령어
                pc_next <= std_logic_vector(unsigned(pc_reg) + 4);
            when "01" => -- 비조건 점프 명령어 (jal, jalr)
                pc_next <= jump_addr;
            when "10" => -- 조건부 분기 명령어 (BEQ, BNE, BLT)
                pc_next <= std_logic_vector(unsigned(pc_reg) + unsigned(branch_offset));
	        when others => -- 예외 처리
                pc_next <= pc_reg; -- 기본값: 현재 PC 유지
        end case;
    end process;

    -- 출력
    pc_out <= pc_reg;
end Behavioral;